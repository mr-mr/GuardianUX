/* -----------------------
 *  1. SASS-specific code 
 * ----------------------- */

/*
 * 1.1 Colors
 */

$color-background:	#FFFFFF;
$color-text:				#FFFFFF;

//

// Create colors to make blocks prettier
$colors:
	ad #FB37FF,
	ad-single #FB37FF,
	neutral #848484,
	container #EEEEEE, 
	box-single #CCCCCC,
	blue-single #3ED5FF,
	hilite-single #AAAAAA,
	hide #FDC16A, hide-single #FCA82E,
	big #70C1FF, big-single #37A8FF;

@each $color in $colors {
	$name: nth($color, 1);
	$background: nth($color, 2);

	.color-#{$name} {
		background-color: $background;
		border: 0;
	}
}



/*
 * 1.2 Typography
 */

// typography
$type-base: 16px;
$type-baseline: 24px;
$type-base-division: 6px;

@function vert($n, $base: $type-base) {
	@return toem($n * $type-baseline, $base);
}


/*
 * 1.3 Grid
 */ 

// grid
$column-number: 12;
$column-width: 78px;
$column-gutter-width: 24px;
$column-gutter-outer-width: 24px;

$grid-width: $column-width*$column-number + $column-gutter-width*($column-number - 1) + 2*$column-gutter-outer-width;

// returns, in pixels, the width of $n columns
@function col($n) {
	@return ($n * $column-width + ($n - 1) * $column-gutter-width);
}

// returns, in pixels, the width of $n columns
@function colpct($n) {
	@return col($n)/col($column-number) * 100%;
}


// convert pixels to em's
@function toem($size, $base: $type-base) {
	@return ($size/$base) * 1em;
}

// convert pixels to percentage
@function topercent($value, $base: $grid-width) {
	@return $value/$base * 100%;
}

/*
 * 1.4 Helper functions 
 */

@mixin text-shadow($offx, $offy, $blur, $color) {
	text-shadow: $offx $offy $blur $color;
}

@mixin linear-gradient($angle, $color-stops...) {
  $_angle-with-vendor-prefix: "";
  $_angle: "";
  @if $angle == "to top" or $angle == "bottom" {
    $_angle-with-vendor-prefix: bottom;
    $_angle: to top;
  } @else if $angle == "to right" or $angle == "left" {
    $_angle-with-vendor-prefix: left;
    $_angle: to right;
  } @else if $angle == "to bottom" or $angle == "top" {
    $_angle-with-vendor-prefix: top;
    $_angle: to bottom;
  } @else if $angle == "to left" or $angle == "right" {
    $_angle-with-vendor-prefix: right;
    $_angle: to left;
  } @else if $angle == "to top right" or $angle == "bottom left" {
    $_angle-with-vendor-prefix: bottom left;
    $_angle: to top right;
  } @else if $angle == "to bottom right" or $angle == "top left" {
    $_angle-with-vendor-prefix: top left;
    $_angle: to bottom right;
  } @else if $angle == "to bottom left" or $angle == "top right" {
    $_angle-with-vendor-prefix: top right;
    $_angle: to bottom left;
  } @else if $angle == "to top left" or $angle == "bottom right" {
    $_angle-with-vendor-prefix: bottom right;
    $_angle: to top left;
  } @else {
    $_angle-with-vendor-prefix: $angle % 360;
    $_angle: (90 - $angle) % 360;
  }
  background: -webkit-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -moz-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -o-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: linear-gradient($_angle, $color-stops);
}

@mixin box-shadow($values) {
	-webkit-box-shadow: $values;
		 -moz-box-shadow: $values;
					box-shadow:	$values;
}

@mixin border-radius($values) {
	-webkit-border-radius: $values;
		 -moz-border-radius: $values;
					border-radius: $values;
}

@mixin transition($values...) {
	-webkit-transition: $values;
		 -moz-transition: $values;
			-ms-transition: $values;
			 -o-transition: $values;
					transition:	$values;
}

@mixin box-sizing($value) {
	-webkit-box-sizing: $value;
		 -moz-box-sizing: $value;
					box-sizing:	$value;
}

@mixin ellipsis() {
	white-space: nowrap;
	overflow: hidden;

	-o-text-overflow: ellipsis;
		 text-overflow: ellipsis;
}

@mixin opacity($n) { 
	$n100: 100 * $n;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $n100 + ")"; /* IE 8 */ 
  filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $n100 + ")"; /* IE 8 */ 
  filter: alpha(opacity=$n100); /* IE 5-7 */ 
  -moz-opacity: $n; /* Netscape */ 
  -khtml-opacity: $n; /* Safari 1.x */ 
  opacity: $n; /* Good browsers */
}

@mixin backface-visibility($value) {
	-webkit-backface-visibility: $value;
		 -moz-backface-visibility: $value;
			 -o-backface-visibility: $value;
					backface-visibility: $value;
}

@mixin transform($value) {
	-webkit-transform: $value;
		 -moz-transform: $value;
			-ms-transform: $value;
			 -o-transform: $value;
					transform: $value;
}

@mixin transform-style($value) {
	-webkit-transform-style: $value;
		 -moz-transform-style: $value;
			-ms-transform-style: $value;
			 -o-transform-style: $value;
					transform-style: $value;
}

@mixin transform-origin($value) {
	-webkit-transform-origin: $value;
		 -moz-transform-origin: $value;
			-ms-transform-origin: $value;
			 -o-transform-origin: $value;
					transform-origin: $value;
}

@mixin perspective($value) {
	-webkit-perspective: $value;
		 -moz-perspective: $value;
			 -o-perspective: $value;
					perspective: $value;
}

@mixin background-size($value) {
	-webkit-background-size: $value;
		 -moz-background-size: $value;
			 -o-background-size: $value; 
					background-size: $value;
}



/* ----------------
 *  2. Base styles
 * ---------------- */

/*
 * 2.1 Typography
 */

@font-face {
	font-family: 'icomoon';
	src:url('../fonts/icomoon.eot');
	src:url('../fonts/icomoon.eot?#iefix') format('embedded-opentype'),
		url('../fonts/icomoon.woff') format('woff'),
		url('../fonts/icomoon.ttf') format('truetype'),
		url('../fonts/icomoon.svg#icomoon') format('svg');
	font-weight: normal;
	font-style: normal;
}

/* 2.1.1 Icon Font definitions */

[data-icon]:before {
	position: absolute;
	left: 0;
	font-family: 'icomoon';
	content: attr(data-icon);
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	text-indent: 0;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
}

[data-icon] {
	position: relative;
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

/* 2.2 Base */

* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }

html {
	margin: 0;
	padding: 0;
}

body {
	width: $grid-width;
	margin: 0 auto;
	padding: 0;

	font: {
		family: "Helvetica Neue", Helvetica, Arial, sans-serif;
		size: $type-base;
		style: normal;
		weight: normal;
	}
	line-height: toem($type-baseline);
	background-color: $color-background;
	color: $color-text;

	text-rendering: optimizeLegibility; 
}

p {
	margin: 0;
}

p + p {
	margin-top: vert(1);
}

h1 {
	margin-top: 0;
	margin-bottom: vert(3, 33px);
	font: {
		size: toem(33px);
		weight: bold;
		style: normal;
	}
	line-height: vert(2, 33px);
	color: #000000;
}

h2 {
	font: {
		size: 1em;
		weight: bold;
		style: normal;
	}
	line-height: vert(1);
	margin: 0;
	color: #000000;
}

* + h2 {
	margin-top: vert(2);
}

h3 {
	margin: 0;
	margin-bottom: toem($type-baseline);

	font: {
		size: 1em;
		weight: bold;
		style: normal;
	}
	line-height: vert(1);
}

h4 {
}

a {
	color: $color-text;
	font-weight: bold;
}

ul {
	margin: vert(1) 0;

	li {
	}
}

b, strong {
	font-weight: bold;
	font-style: normal;
}

i, em {
	font-weight: normal;
	font-style: italic;
}

img {
	display: block;
	max-width: 100%;
	height: auto;
}

figure {
	figcaption {
	}
}

input[type="text"],
input[type="search"] {
	display: block;
	position: relative;
	margin-top: -5px;
	padding: 2px 10px 1px 10px;
	height: toem($type-baseline + 5, 12px);
	background-color: #ffffff;
	border: 1px solid #cccccc;
	@include box-shadow(inset 0 0 1px 0 rgba(0,0,0,0.3));
}

.select-style,
input[type="submit"] {
	display: block;
	position: relative;
	margin-top: -5px;
	border: 1px solid #cccccc;
	padding: 2px 10px 1px 10px;
	height: toem($type-baseline + 5, 12px);
	background-color: #ffffff;
	@include box-shadow(1px 1px 0 0 rgba(0,0,0,0.08));
}

select {
	-webkit-appearance: none;
	width: 100%;
	height: 100%;
	margin: 0;
	padding: 0;
	border: 0;
	background: transparent;
}

::-webkit-input-placeholder {
	color: #adadad;
}

:-moz-placeholder { 
	color: #adadad;
}

::-moz-placeholder {
	color: #adadad;
}

:-ms-input-placeholder {  
	color: #adadad;
}

hr {
	height: 4px;
	border: 0;
	margin: vert(1) 0;
	padding: 0;
	background-color: #000000;
}


/*
 * Modules
 */

// Create column classes
@for $i from 1 through $column-number {
	.desktop-#{$i}{
		position: relative;
		width: $column-width*$i + $column-gutter-width*($i - 1);
		float: left;
	}
}

.desktop-full {
	width: 100%;
}

.desktop-three-quarters {
	width: 100% * 3/4;
}

.desktop-two-thirds {
	width: 100% * 2/3;
}

.desktop-half {
	width: 100% * 1/2;
}

.desktop-third {
	width: 100% * 1/3;
}

.desktop-quarter {
	width: 100% * 1/4;
}

.desktop-sixth {
	width: 100% * 1/6;
}

*[class*="desktop-"] {
	position: relative;
	float: left;
	padding-left: $column-gutter-width;
}

*[class*="desktop-"] + *[class*="desktop-"] {
}

.desktop-hide {
	display: none;
}

.desktop-half + .desktop-quarter + .desktop-quarter ~ *[class*="desktop-"],
.desktop-third + .desktop-third + .desktop-third ~ *[class*="desktop-"] {
	margin-top: vert(1);
}

// Create row classes that eases setting an element's height 
@for $i from 1 through 50 {
	.row-#{$i} {
		height: toem($i * $type-baseline);

		h3.center {
			line-height: toem($i * $type-baseline);
			margin: 0;
		}
	}

	.desktop-row-#{$i} {
		height: toem($i * $type-baseline);

		h3.center {
			line-height: toem($i * $type-baseline);
			margin: 0;
		}
	}
}

h3.center {
	text-align: center;
}

.vertical *[class*="row-"] + *[class*="row-"] {
	margin-top: vert(1);
}

.row {
	padding-top: vert(1);
	padding-bottom: vert(1);
	padding-right: $column-gutter-outer-width;

	.row {
		//padding: 0;
		margin-left: -24px;
	}

	.row + .row {
		margin-top: 0;
		padding-top: 0;
	}
}

.row + .row {
	margin-top: vert(1);
}

.row:before,
.row:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.row:after {
    clear: both;
}

.row {
    *zoom: 1;
}

.row.columns {
	padding-right: 0;
}

.row.full-row {
	margin-left: 0;
	padding-right: 0;
}

.row > .row:first-child {
	padding-top: 0;
}

.row > .row:last-child {
	padding-bottom: 0;
}

*[class*="-single"] {
	background-clip: content-box;
	
	h3 {
		margin-top: vert(0.5);
		margin-left: $column-gutter-width/2;
	}
}

.nav {
	*[class*="-single"] {
	}

	a {
		display: block;
		padding: vert(0.5, 14px) $column-gutter-width/2;
		font-size: toem(14px);
		line-height: 1.5em;
	}
}

.more {
	position: absolute;
	bottom: vert(1)/2;
	right: $column-gutter-width/2;
	font-size: toem(12px);
	line-height: 1.5em;
	text-decoration: none;
}



@media (min-width: 948px) and (max-width: 1248px) {
	$column-number: 9;
	$grid-width: $column-width*$column-number + $column-gutter-width*($column-number - 1) + 2*$column-gutter-outer-width;

	body {
		width: $grid-width;
	}

	// Create column classes
	@for $i from 1 through $column-number {
		.tableth-#{$i}{
			position: relative;
//			width: $column-width*$i + $column-gutter-width*($i - 1);
			width: $column-width*$i + $column-gutter-width*($i);
			float: left;
		}
	}

	.tableth-full {
		width: 100%;
	}

	.tableth-three-quarters {
		width: 100% * 3/4;
	}

	.tableth-two-thirds {
		width: 100% * 2/3;
	}

	.tableth-half {
		width: 100% * 1/2;
	}

	.tableth-third {
		width: 100% * 1/3;
	}

//	.tableth-third:nth-child(n+4) {
	.tableth-third {
		//margin-top: vert(1);
	}

	.tableth-quarter {
		width: 100% * 1/4;
	}

	.tableth-sixth {
		width: 100% * 1/6;
	}

	*[class*="tableth-"] {
		position: relative;
		float: left;
		padding-left: $column-gutter-width;
	}

	// Create row classes that eases setting an element's height 
	@for $i from 1 through 50 {
		.tableth-row-#{$i} {
			height: toem($i * $type-baseline);

			h3.center {
				line-height: toem($i * $type-baseline);
				margin: 0;
			}
		}
	}

	.desktop-hide {
		display: inherit;
	}

	.tableth-hide {
		display: none;
	}

	.tableth-two-thirds + .tableth-third ~ *,
	.tableth-half + .tableth-half ~ *,
	.tableth-full ~ * {
		margin-top: vert(1);
	}
}

@media (min-width: 648px) and (max-width: 948px) {
	$column-number: 6;
	$grid-width: $column-width*$column-number + $column-gutter-width*($column-number - 1) + 2*$column-gutter-outer-width;

	body {
		width: $grid-width;
	}

	// Create column classes
	@for $i from 1 through $column-number {
		.tabletv-#{$i}{
			position: relative;
			width: $column-width*$i + $column-gutter-width*($i - 1);
			float: left;
		}
	}

	.tabletv-full {
		width: 100%;
	}

	.tabletv-three-quarters {
		width: 100% * 3/4;
	}

	.tabletv-half {
		width: 100% * 1/2;
	}

	.tabletv-third {
		width: 100% * 1/3;
	}

	.tabletv-quarter {
		width: 100% * 1/4;
	}

	.tabletv-sixth {
		width: 100% * 1/6;
	}

	*[class*="tabletv-"] {
		position: relative;
		float: left;
		padding-left: $column-gutter-width;
	}

	// Create row classes that eases setting an element's height 
	@for $i from 1 through 50 {
		.tabletv-row-#{$i} {
			height: toem($i * $type-baseline);

			h3.center {
				line-height: toem($i * $type-baseline);
				margin: 0;
			}
		}
	}

	.desktop-hide,
	.tableth-hide {
		display: inherit;
	}

	.tabletv-hide {
		display: none;
	}

	.tabletv-full  ~ *,
	.tabletv-half + .tabletv-half ~ * {
		margin-top: vert(1);
	}
}

@media (max-width: 648px) {
	$column-number: 3;
	$grid-width: $column-width*$column-number + $column-gutter-width*($column-number - 1) + 2*$column-gutter-outer-width;

	body {
		width: $grid-width;
	}

	// Create column classes
	@for $i from 1 through $column-number {
		.phone-#{$i}{
			position: relative;
			width: $column-width*$i + $column-gutter-width*($i - 1);
			float: left;
		}
	}

	.phone-full {
		width: 100%;
		float: none;
	}

	.phone-full + .phone-full {
		margin-top: vert(1);
	}

	.phone-three-quarters {
		width: 100% * 3/4;
	}

	.phone-half {
		width: 100% * 1/2;
	}

	.phone-third {
		width: 100% * 1/3;
	}

	.phone-quarter {
		width: 100% * 1/4;
	}

	.phone-sixth {
		width: 100% * 1/6;
	}

	*[class*="phone-"] + .phone-full {
		margin-top: vert(1);
	}

	*[class*="phone-"] {
		position: relative;
		float: left;
		padding-left: $column-gutter-width;
	}

	// Create row classes that eases setting an element's height 
	@for $i from 1 through 50 {
		.phone-row-#{$i} {
			height: toem($i * $type-baseline);

			h3.center {
				line-height: toem($i * $type-baseline);
				margin: 0;
			}
		}
	}

	.desktop-hide,
	.tableth-hide,
	.tabletv-hide {
		display: inherit;
	}

	.phone-hide {
		display: none;
	}
}


